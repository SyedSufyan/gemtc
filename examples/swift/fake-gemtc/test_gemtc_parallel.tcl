
# Generated by stc version 0.2.0
# date                    : 2013/11/09 10:08:57
# Turbine version         : 0.3.0
# Input filename          : /home/skrieder/exm/apps/fake-gemtc/test_gemtc_parallel.swift
# Output filename         : /home/skrieder/exm/apps/fake-gemtc
# STC home                : /home/skrieder/sfw/stc
# Turbine home            : /home/skrieder/sfw/turbine
# Compiler settings:
# stc.auto-declare              : true
# stc.c_preprocess              : true
# stc.codegen.no-stack          : true
# stc.codegen.no-stack-vars     : true
# stc.compiler-debug            : true
# stc.debugging                 : COMMENTS
# stc.exp.refcounting           : true
# stc.ic.output-file            : 
# stc.input_filename            : test_gemtc_parallel.swift
# stc.log.file                  : 
# stc.log.trace                 : false
# stc.must_pass_wait_vars       : true
# stc.opt.algebra               : false
# stc.opt.array-build           : true
# stc.opt.cancel-refcounts      : true
# stc.opt.constant-fold         : true
# stc.opt.controlflow-fusion    : true
# stc.opt.dead-code-elim        : true
# stc.opt.disable-asserts       : false
# stc.opt.expand-dataflow-ops   : true
# stc.opt.expand-loop-threshold-insts: 256
# stc.opt.expand-loop-threshold-iters: 16
# stc.opt.expand-loops          : true
# stc.opt.flatten-nested        : true
# stc.opt.forward-dataflow      : true
# stc.opt.full-unroll           : false
# stc.opt.function-inline       : false
# stc.opt.function-inline-threshold: 500
# stc.opt.function-signature    : true
# stc.opt.hoist                 : true
# stc.opt.max-iterations        : 10
# stc.opt.piggyback-refcounts   : true
# stc.opt.pipeline              : false
# stc.opt.reorder-insts         : false
# stc.opt.shared-constants      : true
# stc.opt.unroll-loop-threshold-insts: 192
# stc.opt.unroll-loop-threshold-iters: 8
# stc.opt.unroll-loops          : true
# stc.opt.wait-coalesce         : true
# stc.output_filename           : 
# stc.preproc.force-cpp         : false
# stc.preproc.force-gcc         : false
# stc.preprocess_only           : false
# stc.profile                   : false
# stc.rpath                     : 
# stc.stc_home                  : /home/skrieder/sfw/stc
# stc.turbine.version           : 0.3.0
# stc.turbine_home              : /home/skrieder/sfw/turbine
# stc.version                   : 0.2.0

# Metadata:

package require turbine 0.3.0
namespace import turbine::*


proc swift:constants {  } {
    turbine::c::log "function:swift:constants"
}

package require gemtc 0.0


proc swift:main {  } {
    turbine::c::log "enter function: main"
    set stack 0
    # Value __ov___t0 with type $string was defined
    # Value __ov_N with type $int was defined
    # Value __ov___t2 with type $string was defined
    # Value __ov_sleepTime with type $int was defined
    # Value __ov___t5 with type $int was defined
    lassign [ adlb::multicreate [ list integer 1 ] ] u:sleepTime
    turbine::c::log "allocated u:sleepTime=<${u:sleepTime}>"
    # Swift l.13: assigning expression to N
    set optv:__t0 [ turbine::argv_get_impl "bound" ]
    set optv:N [ turbine::check_str_int ${optv:__t0} ]
    # Swift l.14: assigning expression to sleepTime
    set optv:__t2 [ turbine::argv_get_impl "sleeptime" ]
    set optv:sleepTime [ turbine::check_str_int ${optv:__t2} ]
    turbine::store_integer ${u:sleepTime} ${optv:sleepTime}
    set optv:__t5 [ expr { ${optv:N} - 1 } ]
    # Swift l.24: assigning expression to A[_]
    set tcltmp:iterstotal [ expr { max(0,${optv:__t5} - 0 + 1) } ]
    turbine::read_refcount_incr ${u:sleepTime} [ expr { ${tcltmp:iterstotal} - 1 } ]
    main-range0:outer ${stack} ${u:sleepTime} 0 ${optv:__t5} 1
}


proc main-range0:outer { stack u:sleepTime tcltmp:lo tcltmp:hi tcltmp:inc } {
    set tcltmp:itersleft [ expr { max(0,(${tcltmp:hi} - ${tcltmp:lo}) / ${tcltmp:inc} + 1) } ]
    if { [ expr { ${tcltmp:itersleft} <= 0 } ] } {
        return
    }
    if { [ expr { ${tcltmp:itersleft} <= 64 } ] } {
        main-range0:inner ${stack} ${u:sleepTime} ${tcltmp:lo} ${tcltmp:hi} ${tcltmp:inc}
    } else {
        set tcltmp:skip [ expr { ${tcltmp:inc} * max(64,((${tcltmp:itersleft} - 1) / 16) + 1) } ]
        for { set tcltmp:splitstart ${tcltmp:lo} } { ${tcltmp:splitstart} <= ${tcltmp:hi} } { incr tcltmp:splitstart ${tcltmp:skip} } {
            set tcltmp:splitend [ expr { min(${tcltmp:hi},${tcltmp:splitstart} + ${tcltmp:skip} - 1) } ]
            set tcltmp:prio [ turbine::get_priority ]
            turbine::set_priority ${tcltmp:prio}
            adlb::spawn 1 "command main-range0:outer ${stack} ${u:sleepTime} ${tcltmp:splitstart} ${tcltmp:splitend} ${tcltmp:inc}"
            turbine::reset_priority
        }
    }
}


proc main-range0:inner { stack u:sleepTime tcltmp:lo tcltmp:hi tcltmp:inc } {
    for { set v:i ${tcltmp:lo} } { ${v:i} <= ${tcltmp:hi} } { incr v:i ${tcltmp:inc} } {
        lassign [ adlb::multicreate [ list integer 0 ] ] t:8
        turbine::c::log "allocated t:8=<${t:8}>"
        gemtc::gemtc_sleep [ list ${t:8} ] [ list ${u:sleepTime} ]
    }
}

turbine::defaults
turbine::init $engines $servers
turbine::enable_read_refcount
turbine::check_constants "WORKER" ${turbine::WORK_TASK} 0 "CONTROL" ${turbine::CONTROL_TASK} 1 "ADLB_RANK_ANY" ${adlb::RANK_ANY} -100
turbine::start swift:main swift:constants
turbine::finalize

