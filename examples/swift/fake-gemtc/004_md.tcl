
# Generated by stc version 0.2.0
# date                    : 2013/11/03 10:07:03
# Turbine version         : 0.3.0
# Input filename          : /home/skrieder/exm/apps/fake-gemtc/004_md.swift
# Output filename         : /home/skrieder/exm/apps/fake-gemtc
# STC home                : /home/skrieder/sfw/stc
# Turbine home            : /home/skrieder/sfw/turbine
# Compiler settings:
# stc.auto-declare              : true
# stc.c_preprocess              : true
# stc.codegen.no-stack          : true
# stc.codegen.no-stack-vars     : true
# stc.compiler-debug            : true
# stc.debugging                 : COMMENTS
# stc.exp.refcounting           : true
# stc.ic.output-file            : 
# stc.input_filename            : 004_md.swift
# stc.log.file                  : 
# stc.log.trace                 : false
# stc.must_pass_wait_vars       : true
# stc.opt.algebra               : false
# stc.opt.array-build           : true
# stc.opt.cancel-refcounts      : true
# stc.opt.constant-fold         : true
# stc.opt.controlflow-fusion    : true
# stc.opt.dead-code-elim        : true
# stc.opt.disable-asserts       : false
# stc.opt.expand-dataflow-ops   : true
# stc.opt.expand-loop-threshold-insts: 256
# stc.opt.expand-loop-threshold-iters: 16
# stc.opt.expand-loops          : true
# stc.opt.flatten-nested        : true
# stc.opt.forward-dataflow      : true
# stc.opt.full-unroll           : false
# stc.opt.function-inline       : false
# stc.opt.function-inline-threshold: 500
# stc.opt.function-signature    : true
# stc.opt.hoist                 : true
# stc.opt.max-iterations        : 10
# stc.opt.piggyback-refcounts   : true
# stc.opt.pipeline              : false
# stc.opt.reorder-insts         : false
# stc.opt.shared-constants      : true
# stc.opt.unroll-loop-threshold-insts: 192
# stc.opt.unroll-loop-threshold-iters: 8
# stc.opt.unroll-loops          : true
# stc.opt.wait-coalesce         : true
# stc.output_filename           : 
# stc.preproc.force-cpp         : false
# stc.preproc.force-gcc         : false
# stc.preprocess_only           : false
# stc.profile                   : false
# stc.rpath                     : 
# stc.stc_home                  : /home/skrieder/sfw/stc
# stc.turbine.version           : 0.3.0
# stc.turbine_home              : /home/skrieder/sfw/turbine
# stc.version                   : 0.2.0

# Metadata:

package require turbine 0.3.0
namespace import turbine::*


proc swift:constants {  } {
    turbine::c::log "function:swift:constants"
}

package require gemtc 0.0


proc swift:main {  } {
    turbine::c::log "enter function: main"
    set stack 0
    # Value __ov___t0 with type $string was defined
    # Value __ov_np with type $int was defined
    # Value __ov_n with type $int was defined
    lassign [ adlb::multicreate [ list integer 4 ] [ list integer 1 ] [ list container integer ref 2 1 ] [ list container integer ref 1 1 ] [ list container integer ref 1 1 ] [ list container integer ref 1 1 ] [ list blob 1 ] [ list blob 1 ] [ list blob 1 ] [ list blob 1 ] [ list blob 0 ] [ list blob 0 ] [ list blob 0 ] [ list blob 0 ] ] u:np u:n u:a_position_array u:b_position_array u:c_position_array u:d_position_array u:a_blob u:b_blob u:c_blob u:d_blob u:a_result u:b_result u:c_result u:d_result
    turbine::c::log "allocated u:np=<${u:np}> u:n=<${u:n}> u:a_position_array=<${u:a_position_array}> u:b_position_array=<${u:b_position_array}> u:c_position_array=<${u:c_position_array}>"
    turbine::c::log "allocated u:d_position_array=<${u:d_position_array}> u:a_blob=<${u:a_blob}> u:b_blob=<${u:b_blob}> u:c_blob=<${u:c_blob}> u:d_blob=<${u:d_blob}>"
    turbine::c::log "allocated u:a_result=<${u:a_result}> u:b_result=<${u:b_result}> u:c_result=<${u:c_result}> u:d_result=<${u:d_result}>"
    # Swift l.11: assigning expression to np
    set optv:__t0 [ turbine::argv_get_impl "array_size" ]
    set optv:np [ turbine::check_str_int ${optv:__t0} ]
    turbine::store_integer ${u:np} ${optv:np}
    # Swift l.12: assigning expression to nd
    # Swift l.13: assigning expression to n
    set optv:n [ expr { ${optv:np} * 2 } ]
    turbine::store_integer ${u:n} ${optv:n}
    # Swift l.14: assigning expression to mass
    # Swift l.21: assigning expression to a_position_array
    set tcltmp:prio [ turbine::get_priority ]
    turbine::set_priority ${tcltmp:prio}
    adlb::spawn 1 "command f:mdproxy_create_random_vector ${stack} ${u:a_position_array} ${u:n}"
    turbine::reset_priority
    # Swift l.22: assigning expression to b_position_array
    # Swift l.23: assigning expression to c_position_array
    # Swift l.24: assigning expression to d_position_array
    # Swift l.27: assigning expression to a_blob
    turbine::blob_from_floats [ list ${u:a_blob} ] [ list ${u:a_position_array} ]
    # Swift l.28: assigning expression to b_blob
    turbine::blob_from_floats [ list ${u:b_blob} ] [ list ${u:b_position_array} ]
    # Swift l.29: assigning expression to c_blob
    turbine::blob_from_floats [ list ${u:c_blob} ] [ list ${u:c_position_array} ]
    # Swift l.30: assigning expression to d_blob
    turbine::blob_from_floats [ list ${u:d_blob} ] [ list ${u:d_position_array} ]
    # Swift l.33: assigning expression to a_result
    gemtc::gemtc_mdproxy [ list ${u:a_result} ] [ list ${u:np} ${u:a_blob} ]
    # Swift l.34: assigning expression to b_result
    gemtc::gemtc_mdproxy [ list ${u:b_result} ] [ list ${u:np} ${u:b_blob} ]
    # Swift l.35: assigning expression to c_result
    gemtc::gemtc_mdproxy [ list ${u:c_result} ] [ list ${u:np} ${u:c_blob} ]
    # Swift l.36: assigning expression to d_result
    gemtc::gemtc_mdproxy [ list ${u:d_result} ] [ list ${u:np} ${u:d_blob} ]
    # Swift l.38: assigning expression to a_result_array
    # Swift l.39: assigning expression to b_result_array
    # Swift l.40: assigning expression to c_result_array
    # Swift l.41: assigning expression to d_result_array
    turbine::rule [ list ${u:a_position_array} ] "main-optmerged ${stack} ${u:a_position_array} ${u:c_position_array} ${u:b_position_array} ${u:d_position_array}"
}


proc main-optmerged { stack u:a_position_array u:c_position_array u:b_position_array u:d_position_array } {
    set tcltmp:contents [ adlb::enumerate ${u:a_position_array} dict all 0 ]
    dict for {v:2 a:2} ${tcltmp:contents} {
        turbine::read_refcount_incr ${a:2} 3
        turbine::container_insert ${u:b_position_array} ${v:2} ${a:2} ref 0
        turbine::container_insert ${u:c_position_array} ${v:2} ${a:2} ref 0
        turbine::container_insert ${u:d_position_array} ${v:2} ${a:2} ref 0
    }
    turbine::read_refcount_decr ${u:a_position_array} 1
    adlb::write_refcount_decr ${u:d_position_array} 1
    adlb::write_refcount_decr ${u:b_position_array} 1
    adlb::write_refcount_decr ${u:c_position_array} 1
}


proc f:mdproxy_create_random_vector { stack u:v u:n } {
    turbine::c::log "enter function: mdproxy_create_random_vector"
    lassign [ adlb::multicreate [ list blob 1 ] ] u:b
    turbine::c::log "allocated u:b=<${u:b}>"
    # Swift l.12: assigning expression to b
    # Swift l.13: assigning expression to v
    turbine::floats_from_blob [ list ${u:v} ] [ list ${u:b} ]
    turbine::rule [ list ${u:n} ] "mdproxy_create_random_vector-call_sync-mdproxy_create_random_vector_blob ${stack} ${u:b} ${u:n}"
}


proc mdproxy_create_random_vector-call_sync-mdproxy_create_random_vector_blob { stack u:b u:n } {
    # Value __ov_n with type $int was defined
    # Value __ov_b with type $blob was defined
    set optv:n [ turbine::retrieve_integer ${u:n} CACHED 1 ]
    set optv:b [ gemtc::mdproxy_create_random_vector ${optv:n} ]
    turbine::store_blob ${u:b} ${optv:b}
    turbine::free_local_blob ${optv:b}
}


proc f:mdproxy_create_random_vector_blob { stack u:b u:n } {
    turbine::c::log "enter function: mdproxy_create_random_vector_blob"
    turbine::read_refcount_incr ${u:n} 1
    turbine::rule [ list ${u:n} ] "mdproxy_create_random_vector_blob-argwait ${stack} ${u:b} ${u:n}"
}


proc mdproxy_create_random_vector_blob-argwait { stack u:b u:n } {
    # Value __v_n with type $int was defined
    # Value __v_b with type $blob was defined
    set v:n [ turbine::retrieve_integer ${u:n} CACHED 1 ]
    set v:b [ gemtc::mdproxy_create_random_vector ${v:n} ]
    turbine::store_blob ${u:b} ${v:b}
    turbine::free_local_blob ${v:b}
}

turbine::defaults
turbine::init $engines $servers
turbine::enable_read_refcount
turbine::check_constants "WORKER" ${turbine::WORK_TASK} 0 "CONTROL" ${turbine::CONTROL_TASK} 1 "ADLB_RANK_ANY" ${adlb::RANK_ANY} -100
turbine::start swift:main swift:constants
turbine::finalize

