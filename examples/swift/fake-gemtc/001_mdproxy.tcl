
# Generated by stc version 0.2.0
# date                    : 2014/01/10 14:23:36
# Turbine version         : 0.3.0
# Input filename          : /home/skrieder/exm/apps/fake-gemtc/001_mdproxy.swift
# Output filename         : /home/skrieder/exm/apps/fake-gemtc
# STC home                : /home/skrieder/sfw/stc
# Turbine home            : /home/skrieder/sfw/turbine
# Compiler settings:
# stc.auto-declare              : true
# stc.c_preprocess              : true
# stc.checkpointing             : true
# stc.codegen.no-stack          : true
# stc.codegen.no-stack-vars     : true
# stc.compiler-debug            : true
# stc.debugging                 : COMMENTS
# stc.ic.output-file            : 
# stc.input_filename            : 001_mdproxy.swift
# stc.log.file                  : 
# stc.log.trace                 : false
# stc.must_pass_wait_vars       : true
# stc.opt.algebra               : false
# stc.opt.array-build           : true
# stc.opt.batch-refcounts       : true
# stc.opt.cancel-refcounts      : true
# stc.opt.constant-fold         : true
# stc.opt.controlflow-fusion    : true
# stc.opt.dead-code-elim        : true
# stc.opt.disable-asserts       : false
# stc.opt.expand-dataflow-ops   : true
# stc.opt.expand-loop-threshold-insts: 256
# stc.opt.expand-loop-threshold-iters: 16
# stc.opt.expand-loops          : true
# stc.opt.finalized-var         : true
# stc.opt.flatten-nested        : true
# stc.opt.full-unroll           : false
# stc.opt.function-inline       : false
# stc.opt.function-inline-threshold: 500
# stc.opt.function-signature    : true
# stc.opt.hoist                 : true
# stc.opt.hoist-refcounts       : true
# stc.opt.loop-simplify         : true
# stc.opt.max-iterations        : 10
# stc.opt.merge-refcounts       : true
# stc.opt.piggyback-refcounts   : true
# stc.opt.pipeline              : false
# stc.opt.reorder-insts         : false
# stc.opt.shared-constants      : true
# stc.opt.unroll-loop-threshold-insts: 192
# stc.opt.unroll-loop-threshold-iters: 8
# stc.opt.unroll-loops          : true
# stc.opt.value-number          : true
# stc.opt.wait-coalesce         : true
# stc.output_filename           : 
# stc.preproc.force-cpp         : false
# stc.preproc.force-gcc         : false
# stc.preprocess_only           : false
# stc.profile                   : false
# stc.refcounting               : true
# stc.rpath                     : 
# stc.stc_home                  : /home/skrieder/sfw/stc
# stc.turbine.version           : 0.3.0
# stc.turbine_home              : /home/skrieder/sfw/turbine
# stc.version                   : 0.2.0

# Metadata:

package require turbine 0.3.0
namespace import turbine::*


proc swift:constants {  } {
    turbine::c::log "function:swift:constants"
}

package require gemtc 0.0


proc swift:main {  } {
    turbine::c::log "enter function: main"
    set stack 0
    # Var: int u:np 001_mdproxy.swift:main():11:2
    # Var: int u:n 001_mdproxy.swift:main():13:2
    # Var: float[int] u:position_array 001_mdproxy.swift:main():17:2
    # Var: float[int] u:result_array 001_mdproxy.swift:main():18:2
    # Var: blob u:b 001_mdproxy.swift:main():32:2
    # Var: blob u:result 001_mdproxy.swift:main():43:2
    # Var: $string optv:__t0 VALUE_OF [string:__t0]
    # Var: $int optv:np VALUE_OF [int:np]
    # Var: $int optv:n VALUE_OF [int:n]
    # Var: $void optv:__t2 VALUE_OF [void:__t2]
    # Var: $void optv:__t6 VALUE_OF [void:__t6]
    lassign [ adlb::multicreate [ list integer 1 ] [ list integer 1 ] [ list container integer ref 3 1 ] [ list container integer ref 2 1 ] [ list blob 1 ] [ list blob 1 ] ] u:np u:n u:position_array u:result_array u:b u:result
    turbine::c::log "allocated u:np=<${u:np}> u:n=<${u:n}> u:position_array=<${u:position_array}> u:result_array=<${u:result_array}> u:b=<${u:b}>"
    turbine::c::log "allocated u:result=<${u:result}>"
    # Swift l.11: assigning expression to np
    set optv:__t0 [ turbine::argv_get_impl "np" ]
    set optv:np [ turbine::check_str_int ${optv:__t0} ]
    turbine::store_integer ${u:np} ${optv:np}
    # Swift l.12: assigning expression to nd
    # Swift l.13: assigning expression to n
    set optv:n [ expr { ${optv:np} * 2 } ]
    turbine::store_integer ${u:n} ${optv:n}
    # Swift l.14: assigning expression to mass
    # Swift l.21: assigning expression to position_array
    set tcltmp:prio [ turbine::get_priority ]
    turbine::set_priority ${tcltmp:prio}
    adlb::spawn 1 "command f:mdproxy_create_random_vector ${stack} ${u:position_array} ${u:n}"
    turbine::reset_priority
    # Swift l.23 evaluating  expression and throwing away 1 results
    set optv:__t2 [ turbine::printf_local "Initial Vector\n" ]
    # Swift l.32: assigning expression to b
    turbine::blob_from_floats [ list ${u:b} ] [ list ${u:position_array} ]
    # Swift l.43: assigning expression to result
    gemtc::gemtc_mdproxy [ list ${u:result} ] [ list ${u:np} ${u:b} ]
    # Swift l.45: assigning expression to result_array
    turbine::floats_from_blob [ list ${u:result_array} ] [ list ${u:result} ]
    # Swift l.48 evaluating  expression and throwing away 1 results
    set optv:__t6 [ turbine::printf_local "Result Vector\n" ]
    turbine::rule [ list ${u:position_array} ] "main-foreach-wait0 ${stack} ${u:position_array}" type ${::turbine::LOCAL}
    turbine::rule [ list ${u:result_array} ] "main-foreach-wait1 ${stack} ${u:result_array}" type ${::turbine::LOCAL}
}


proc main-foreach-wait0 { stack u:position_array } {
    # Swift l.27 evaluating  expression and throwing away 1 results
    set tcltmp:container_sz [ adlb::enumerate ${u:position_array} count all 0 ]
    set tcltmp:iters ${tcltmp:container_sz}
    turbine::read_refcount_incr ${u:position_array} [ expr { ${tcltmp:iters} - 2 } ]
    main-foreach0:outer ${stack} ${u:position_array} 0 [ expr { ${tcltmp:container_sz} - 1 } ] 1
}


proc main-foreach0:outer { stack u:position_array tcltmp:lo tcltmp:hi tcltmp:inc } {
    if { [ expr { ${tcltmp:lo} > ${tcltmp:hi} } ] } {
        return
    }
    while {1} {
        set tcltmp:itersleft [ expr { max(0,(${tcltmp:hi} - ${tcltmp:lo}) / ${tcltmp:inc} + 1) } ]
        if { [ expr { ${tcltmp:itersleft} <= 64 } ] } {
            main-foreach0:inner ${stack} ${u:position_array} ${tcltmp:lo} ${tcltmp:hi} ${tcltmp:inc}
            return
        } else {
            set tcltmp:skip [ expr { ${tcltmp:inc} * max(64,((${tcltmp:itersleft} - 1) / 16) + 1) } ]
            for { set tcltmp:splitstart [ expr { ${tcltmp:lo} + ${tcltmp:skip} } ] } { ${tcltmp:splitstart} <= ${tcltmp:hi} } { incr tcltmp:splitstart ${tcltmp:skip} } {
                set tcltmp:splitend [ expr { min(${tcltmp:hi},${tcltmp:splitstart} + ${tcltmp:skip} - 1) } ]
                set tcltmp:prio [ turbine::get_priority ]
                turbine::set_priority ${tcltmp:prio}
                adlb::spawn 1 "command main-foreach0:outer ${stack} ${u:position_array} ${tcltmp:splitstart} ${tcltmp:splitend} ${tcltmp:inc}"
                turbine::reset_priority
            }
            set tcltmp:hi [ expr { ${tcltmp:lo} + ${tcltmp:skip} - 1 } ]
        }
    }
}


proc main-foreach0:inner { stack u:position_array tcltmp:lo tcltmp:hi tcltmp:inc } {
    set tcltmp:splitlen [ expr { ${tcltmp:hi} - ${tcltmp:lo} + 1 } ]
    set tcltmp:contents [ adlb::enumerate ${u:position_array} dict ${tcltmp:splitlen} ${tcltmp:lo} ]
    dict for {v:index u:value} ${tcltmp:contents} {
        turbine::read_refcount_incr ${u:value} 1
        turbine::rule [ list ${u:value} ] "main-call_foreign-printf ${stack} ${u:value} ${v:index}"
    }
    set tcltmp:iters [ expr { max(0,(${tcltmp:hi} - ${tcltmp:lo}) / ${tcltmp:inc} + 1) } ]
    turbine::read_refcount_decr ${u:position_array} [ expr { ${tcltmp:iters} } ]
}


proc main-call_foreign-printf { stack u:value v:index } {
    # Var: $float optv:value VALUE_OF [float:value]
    # Var: $void optv:__t4 VALUE_OF [void:__t4]
    set optv:value [ turbine::retrieve_float ${u:value} CACHED 1 ]
    set optv:__t4 [ turbine::printf_local "position_array\[%i\] = %f" ${v:index} ${optv:value} ]
}


proc main-foreach-wait1 { stack u:result_array } {
    # Swift l.51 evaluating  expression and throwing away 1 results
    set tcltmp:container_sz [ adlb::enumerate ${u:result_array} count all 0 ]
    set tcltmp:iters ${tcltmp:container_sz}
    turbine::read_refcount_incr ${u:result_array} [ expr { ${tcltmp:iters} - 2 } ]
    main-foreach1:outer ${stack} ${u:result_array} 0 [ expr { ${tcltmp:container_sz} - 1 } ] 1
}


proc main-foreach1:outer { stack u:result_array tcltmp:lo tcltmp:hi tcltmp:inc } {
    if { [ expr { ${tcltmp:lo} > ${tcltmp:hi} } ] } {
        return
    }
    while {1} {
        set tcltmp:itersleft [ expr { max(0,(${tcltmp:hi} - ${tcltmp:lo}) / ${tcltmp:inc} + 1) } ]
        if { [ expr { ${tcltmp:itersleft} <= 64 } ] } {
            main-foreach1:inner ${stack} ${u:result_array} ${tcltmp:lo} ${tcltmp:hi} ${tcltmp:inc}
            return
        } else {
            set tcltmp:skip [ expr { ${tcltmp:inc} * max(64,((${tcltmp:itersleft} - 1) / 16) + 1) } ]
            for { set tcltmp:splitstart [ expr { ${tcltmp:lo} + ${tcltmp:skip} } ] } { ${tcltmp:splitstart} <= ${tcltmp:hi} } { incr tcltmp:splitstart ${tcltmp:skip} } {
                set tcltmp:splitend [ expr { min(${tcltmp:hi},${tcltmp:splitstart} + ${tcltmp:skip} - 1) } ]
                set tcltmp:prio [ turbine::get_priority ]
                turbine::set_priority ${tcltmp:prio}
                adlb::spawn 1 "command main-foreach1:outer ${stack} ${u:result_array} ${tcltmp:splitstart} ${tcltmp:splitend} ${tcltmp:inc}"
                turbine::reset_priority
            }
            set tcltmp:hi [ expr { ${tcltmp:lo} + ${tcltmp:skip} - 1 } ]
        }
    }
}


proc main-foreach1:inner { stack u:result_array tcltmp:lo tcltmp:hi tcltmp:inc } {
    set tcltmp:splitlen [ expr { ${tcltmp:hi} - ${tcltmp:lo} + 1 } ]
    set tcltmp:contents [ adlb::enumerate ${u:result_array} dict ${tcltmp:splitlen} ${tcltmp:lo} ]
    dict for {v:index0 u:value:1} ${tcltmp:contents} {
        turbine::read_refcount_incr ${u:value:1} 1
        turbine::rule [ list ${u:value:1} ] "main-call_foreign-printf-1 ${stack} ${u:value:1} ${v:index0}"
    }
    set tcltmp:iters [ expr { max(0,(${tcltmp:hi} - ${tcltmp:lo}) / ${tcltmp:inc} + 1) } ]
    turbine::read_refcount_decr ${u:result_array} [ expr { ${tcltmp:iters} } ]
}


proc main-call_foreign-printf-1 { stack u:value:1 v:index0 } {
    # Var: $float optv:value:1 VALUE_OF [float:value:1]
    # Var: $void optv:__t8 VALUE_OF [void:__t8]
    set optv:value:1 [ turbine::retrieve_float ${u:value:1} CACHED 1 ]
    set optv:__t8 [ turbine::printf_local "result_array\[%i\] = %f" ${v:index0} ${optv:value:1} ]
}


proc f:mdproxy_create_random_vector { stack u:v u:n } {
    turbine::c::log "enter function: mdproxy_create_random_vector"
    # Var: blob u:b ./gemtc.swift:mdproxy_create_random_vector():12:2
    lassign [ adlb::multicreate [ list blob 1 ] ] u:b
    turbine::c::log "allocated u:b=<${u:b}>"
    # Swift l.12: assigning expression to b
    # Swift l.13: assigning expression to v
    turbine::floats_from_blob [ list ${u:v} ] [ list ${u:b} ]
    turbine::rule [ list ${u:n} ] "mdproxy_create_random_vector-call_sync-mdproxy_create_random_vector_blob ${stack} ${u:b} ${u:n}"
}


proc mdproxy_create_random_vector-call_sync-mdproxy_create_random_vector_blob { stack u:b u:n } {
    # Var: $int optv:n VALUE_OF [int:n]
    # Var: $blob optv:b VALUE_OF [blob:b]
    set optv:n [ turbine::retrieve_integer ${u:n} CACHED 1 ]
    set optv:b [ gemtc::mdproxy_create_random_vector ${optv:n} ]
    turbine::store_blob ${u:b} ${optv:b}
    turbine::free_local_blob ${optv:b}
}


proc f:mdproxy_create_random_vector_blob { stack u:b u:n } {
    turbine::c::log "enter function: mdproxy_create_random_vector_blob"
    turbine::read_refcount_incr ${u:n} 1
    turbine::rule [ list ${u:n} ] "mdproxy_create_random_vector_blob-argwait ${stack} ${u:b} ${u:n}"
}


proc mdproxy_create_random_vector_blob-argwait { stack u:b u:n } {
    # Var: $int v:n VALUE_OF [int:n]
    # Var: $blob v:b VALUE_OF [blob:b]
    set v:n [ turbine::retrieve_integer ${u:n} CACHED 1 ]
    set v:b [ gemtc::mdproxy_create_random_vector ${v:n} ]
    turbine::store_blob ${u:b} ${v:b}
    turbine::free_local_blob ${v:b}
}

turbine::defaults
turbine::init $engines $servers "Swift"
turbine::enable_read_refcount
turbine::xpt_init
turbine::check_constants "WORKER" ${turbine::WORK_TASK} 0 "CONTROL" ${turbine::CONTROL_TASK} 1 "ADLB_RANK_ANY" ${adlb::RANK_ANY} -100
turbine::start swift:main swift:constants
turbine::finalize
turbine::xpt_finalize

